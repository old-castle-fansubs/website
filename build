#!/usr/bin/env python3
import os
import typing as t
import dateutil.parser
from jinja2 import Environment, FileSystemLoader


def _render(env: t.Any, template: str, output: str, **kwargs: t.Any) -> None:
    target_path = 'public/' + output
    os.makedirs(os.path.dirname(target_path), exist_ok=True)
    new_content = env.get_template(template).render(**kwargs)
    if os.path.exists(target_path):
        with open(target_path, 'r', encoding='utf-8') as handle:
            old_content = handle.read()
            if old_content == new_content:
                return
    with open(target_path, 'w', encoding='utf-8') as handle:
        handle.write(new_content)


def _render_news(env: t.Any) -> None:
    class News:
        def __init__(
                self,
                date: str,
                title: str,
                content: str,
                path: str,
                url: str) -> None:
            self.date = dateutil.parser.parse(date)
            self.title = title
            self.content = content
            self.path = path
            self.url = url

    news = []
    news_dir = os.path.join(os.path.dirname(__file__), 'news')
    for entry in os.scandir(news_dir):
        with open(entry.path, 'r', encoding='utf-8') as handle:
            date = handle.readline().strip()
            title = handle.readline().strip()
            if handle.readline().strip():
                raise ValueError('Expected empty line in news ' + entry.path)
            content = handle.read()
        url = 'news-' + entry.name.replace('.html', '') + '.html'

        news_entry = News(date, title, content, entry.path, url)
        news.append(news_entry)

        _render(
            env,
            template='news-page.html',
            output=url,
            entry=news_entry,
            title=news_entry.title)

    news.sort(key=lambda news: news.path, reverse=True)

    _render(env, template='news.html', output='index.html', news=news)


def _render_releases(env: t.Any) -> None:
    _render(env, template='releases.html', output='releases.html')


def _render_about(env: t.Any) -> None:
    _render(env, template='about.html', output='about.html')


def main() -> None:
    env = Environment(loader=FileSystemLoader('html'))
    _render_news(env)
    _render_releases(env)
    _render_about(env)


if __name__ == '__main__':
    main()
