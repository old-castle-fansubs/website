#!/usr/bin/env python3
import os
import typing as t
import dateutil.parser
import pathlib
import yaml
from jinja2 import Environment, FileSystemLoader


TARGET_DIR = pathlib.Path('public')


def _save(path: pathlib.Path, content: bytes):
    if path.exists():
        old_content = path.read_bytes()
        if old_content == content:
            return
    print('Writing', path)
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_bytes(content)


def _copy(source: str):
    source_path = pathlib.Path(source)
    if os.path.isdir(source_path):
        source_paths = [
            path
            for path in source_path.rglob('*')
            if path.is_file()]
    else:
        source_paths = [source_path]
    for source_path in source_paths:
        target_path = TARGET_DIR / source_path
        _save(target_path, source_path.read_bytes())


def _render(env: t.Any, template: str, output: str, **kwargs: t.Any) -> None:
    target_path = TARGET_DIR / output
    target_path.parent.mkdir(parents=True, exist_ok=True)
    new_content = env.get_template(template).render(**kwargs).encode('utf-8')
    _save(target_path, new_content)


def _render_news(env: t.Any) -> None:
    class News:
        def __init__(
                self,
                date: str,
                title: str,
                content: str,
                path: pathlib.Path,
                url: str) -> None:
            self.date = dateutil.parser.parse(date)
            self.title = title
            self.content = content
            self.path = path
            self.url = url

    news_entries = []
    news_dir = pathlib.Path(__file__).parent / 'news'
    for entry in news_dir.iterdir():
        with entry.open('r', encoding='utf-8') as handle:
            date = handle.readline().strip()
            title = handle.readline().strip()
            if handle.readline().strip():
                raise ValueError('Expected empty line in news ' + entry.name)
            content = handle.read()
        url = 'news-' + entry.stem + '.html'
        news_entries.append(News(date, title, content, entry, url))
    news_entries.sort(key=lambda news: news.path, reverse=True)

    for news_entry in news_entries:
        _render(
            env,
            template='news-page.html',
            output=news_entry.url,
            entry=news_entry,
            title=news_entry.title)

    _render(env, template='news.html', output='index.html', news=news_entries)


def _render_releases(env: t.Any) -> None:
    releases = []
    releases_dir = pathlib.Path(__file__).parent / 'releases'
    for entry in sorted(releases_dir.iterdir()):
        with entry.open('r', encoding='utf-8') as handle:
            releases.append(yaml.load(handle))

    _render(
        env,
        template='releases.html',
        output='releases.html',
        releases=releases)


def _render_about(env: t.Any) -> None:
    _render(env, template='about.html', output='about.html')


def _render_guest_book(env: t.Any) -> None:
    _render(env, template='guest_book.html', output='guest_book.html')


def _render_attention(env: t.Any) -> None:
    _render(env, template='attention.html', output='attention.html')


def main() -> None:
    env = Environment(loader=FileSystemLoader('html'))
    _render_news(env)
    _render_releases(env)
    _render_about(env)
    _render_guest_book(env)
    _render_attention(env)
    _copy('style.css')
    _copy('comments.css')
    _copy('img')


if __name__ == '__main__':
    main()
