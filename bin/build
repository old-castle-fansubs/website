#!/usr/bin/env python3
import json
import os
import subprocess
import typing as T
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path

import dateutil.parser
import jinja2
import PIL.Image

ROOT_DIR = Path(__file__).parent.parent
TARGET_DIR = Path("public")


class ProjectLoader(jinja2.BaseLoader):
    source = ""

    def get_source(
        self, environment: jinja2.Environment, template: str
    ) -> T.Any:
        if template != "generated_project.html":
            raise jinja2.TemplateNotFound(template)
        return (ProjectLoader.source, None, lambda: False)


@dataclass
class FeaturedImage:
    date: datetime
    name: str

    @property
    def url(self) -> str:
        return "img/featured/" + self.name

    @property
    def thumbnail_url(self) -> str:
        stem, suffix = os.path.splitext(self.name)
        return "img-thumb/featured/" + stem.rstrip(".") + ".jpg"

    @property
    def path(self) -> Path:
        return ROOT_DIR / self.url

    @property
    def thumbnail_path(self) -> Path:
        return TARGET_DIR / self.thumbnail_url


@dataclass
class Release:
    date: datetime
    file_name: str
    file_version: int
    episode_number: str
    episode_title: str
    links: T.List[str]
    is_visible: bool

    @property
    def is_hidden(self) -> bool:
        return not self.is_visible


@dataclass
class Project:
    title: str
    content: str
    stem: str
    is_finished: bool

    @property
    def url(self) -> str:
        return "project-" + self.stem + ".html"


@dataclass
class News:
    date: datetime
    title: str
    author: str
    content: str
    path: Path


def _save(path: Path, content: bytes) -> None:
    if path.exists():
        old_content = path.read_bytes()
        if old_content == content:
            return
    print("Writing", path)
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_bytes(content)


def _copy(source: T.Union[str, Path]) -> None:
    source_path = Path(source)
    if os.path.isdir(source_path):
        source_paths = [
            path for path in source_path.rglob("*") if path.is_file()
        ]
    else:
        source_paths = [source_path]
    for source_path in source_paths:
        target_path = TARGET_DIR / source_path
        _save(target_path, source_path.read_bytes())


def _generate_thumbnail(
    source: Path, target: Path, width: int = 320, height: int = 240
) -> None:
    if target.exists():
        return

    target.parent.mkdir(exist_ok=True, parents=True)

    try:
        image = PIL.Image.open(str(source))
        image.thumbnail((width, height))
        image.save(target, "JPEG")
    except OSError:
        subprocess.run(
            [
                "ffmpeg",
                "-i",
                str(source),
                "-vframes",
                "1",
                "-s",
                f"{width}x{height}",
                str(target),
            ]
        )


def _get_news() -> T.Iterable[News]:
    news_dir = ROOT_DIR / "html" / "news"
    for news_path in news_dir.iterdir():
        with news_path.open("r", encoding="utf-8") as handle:
            date = dateutil.parser.parse(handle.readline().strip())
            title = handle.readline().strip()
            author = handle.readline().strip()
            if handle.readline().strip():
                raise ValueError(
                    "Expected empty line in news " + news_path.name
                )
            content = handle.read()
        yield News(date, title, author, content, news_path)


def _get_releases() -> T.Iterable[Release]:
    return [
        Release(
            date=dateutil.parser.parse(item["date"]),
            file_name=item["file"],
            file_version=item["version"],
            episode_number=item["episode"],
            episode_title=item["title"],
            links=item["links"],
            is_visible="hidden" not in item or not item["hidden"],
        )
        for item in json.loads(
            (ROOT_DIR / "data" / "releases.json").read_text(encoding="utf-8")
        )
    ]


def _get_featured_images() -> T.Iterable[FeaturedImage]:
    return [
        FeaturedImage(dateutil.parser.parse(item["date"]), item["name"])
        for item in json.loads(
            (ROOT_DIR / "data" / "featured.json").read_text(encoding="utf-8")
        )
    ]


def _get_projects() -> T.Iterable[Project]:
    projects_dir = ROOT_DIR / "html" / "projects"
    for path in projects_dir.iterdir():
        with path.open("r", encoding="utf-8") as handle:
            title = handle.readline().strip()
            status = handle.readline().strip()
            if status not in ("finished", "ongoing"):
                raise ValueError(
                    f'Unknown status "{status}" in project "{path}"'
                )
            if handle.readline().strip():
                raise ValueError(f'Expected empty line in project "{path}"')
            content = handle.read()

        yield Project(
            title=title,
            content=content,
            stem=path.stem,
            is_finished=status == "finished",
        )


def _render(
    env: jinja2.Environment, template: str, output: str, **kwargs: T.Any
) -> None:
    target_path = TARGET_DIR / output
    target_path.parent.mkdir(parents=True, exist_ok=True)
    new_content = env.get_template(template).render(**kwargs).encode("utf-8")
    _save(target_path, new_content)


def _render_home(env: jinja2.Environment) -> None:
    _render(
        env,
        template="home.html",
        output="index.html",
        featured_images=_get_featured_images(),
    )


def _render_featured_images(env: jinja2.Environment) -> None:
    featured_images = _get_featured_images()

    for featured_image in featured_images:
        _generate_thumbnail(featured_image.path, featured_image.thumbnail_path)

    _render(
        env,
        template="featured.html",
        output="featured.html",
        featured_images=featured_images,
    )


def _render_news(env: jinja2.Environment) -> None:
    _render(
        env,
        template="news.html",
        output="news.html",
        news_entries=sorted(
            _get_news(), key=lambda news: news.path, reverse=True
        ),
    )


def _render_projects(env: jinja2.Environment) -> None:
    release_entries = list(_get_releases())
    projects = list(sorted(_get_projects(), key=lambda project: project.title))

    for project in projects:
        ProjectLoader.source = project.content
        _render(
            env,
            template="project.html",
            output=project.url,
            project=project,
            releases=release_entries,
        )

    _render(
        env,
        template="projects.html",
        output="projects.html",
        projects=projects,
    )


def _render_about(env: jinja2.Environment) -> None:
    _render(env, template="about.html", output="about.html")


def _render_guest_book(env: jinja2.Environment) -> None:
    _render(env, template="guest_book.html", output="guest_book.html")


def _render_attention(env: jinja2.Environment) -> None:
    _render(env, template="attention.html", output="attention.html")


def main() -> None:
    env = jinja2.Environment(
        loader=jinja2.ChoiceLoader(
            [ProjectLoader(), jinja2.FileSystemLoader("html")]
        ),
        lstrip_blocks=True,
        trim_blocks=True,
    )
    _render_home(env)
    _render_featured_images(env)
    _render_news(env)
    _render_projects(env)
    _render_about(env)
    _render_guest_book(env)
    _render_attention(env)
    _copy("data/style.css")
    _copy("data/comments.css")
    _copy("img")


if __name__ == "__main__":
    main()
