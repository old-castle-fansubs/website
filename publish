#!/usr/bin/env python3
from getpass import getpass
import os
import sys
import argparse
import requests
import dateutil.parser

IGNORE = ['node_modules', '.git', '.sass-cache']
ALLOWED_FILETYPES = [
    '.html', '.htm',
    '.jpg', '.png', '.gif', '.svg', '.ico',
    '.js', '.css',
    '.txt', '.ass',
]


def collect_local_files(local_root):
    lpaths = []
    for path, dirs, files in os.walk(local_root, topdown=True):
        dirs[:] = [d for d in dirs if d not in IGNORE]
        for f in files:
            if f == '.':
                continue
            fpath = os.path.join(path, f)
            mtime = os.path.getmtime(fpath)
            lpaths.append((os.path.relpath(fpath, local_root), mtime))
    return lpaths


def collect_remote_files(base_url):
    response = requests.get('{}/list'.format(base_url))
    rpaths = [
        (d['path'], dateutil.parser.parse(d['updated_at']).timestamp())
        for d in response.json()['files']
    ]
    return rpaths


def collect_diff(lpaths, rpaths):
    # what to delete
    lexists = [path for path, _ in lpaths]
    to_delete = [path for path, _ in rpaths if path not in lexists]

    to_update = []
    to_create = []
    for lpath, lmtime in lpaths:
        remote = next(
            ((path, mtime) for (path, mtime) in rpaths if path == lpath),
            None)
        if remote is None:
            to_create.append(lpath)
        elif remote[1] < lmtime:
            to_update.append(lpath)
    return to_create, to_update, to_delete


def sync_files(local_root, base_url, to_create, to_update, to_delete, dry_run):
    if to_delete:
        for path in to_delete:
            print(' X {}'.format(path))
        if not dry_run:
            response = requests.post(
                '{}/delete'.format(base_url),
                params={'filenames[]': to_delete})
            response.raise_for_status()

    for path in to_create + to_update:
        _, ext = os.path.splitext(path)
        if ext not in ALLOWED_FILETYPES:
            continue
        print('-> {}'.format(path))
        files = {path: open(os.path.join(local_root, path), 'rb')}
        if not dry_run:
            response = requests.post('{}/upload'.format(base_url), files=files)
            response.raise_for_status()


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--dry-run', action='store_true')
    return parser.parse_args()


def main():
    args = parse_args()
    dry_run = args.dry_run

    local_root = os.path.join(os.path.dirname(__file__), 'public')
    username = 'old-castle-fansubs'
    password = getpass('Password: ')
    base_url = 'https://{}:{}@neocities.org/api'.format(username, password)

    lpaths = collect_local_files(local_root)
    rpaths = collect_remote_files(base_url)
    to_create, to_update, to_delete = collect_diff(lpaths, rpaths)

    sync_files(local_root, base_url, to_create, to_update, to_delete, dry_run)


if __name__ == '__main__':
    main()
